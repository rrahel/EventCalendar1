<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:p="http://www.springframework.org/schema/p" xmlns:context="http://www.springframework.org/schema/context"
	xmlns:mvc="http://www.springframework.org/schema/mvc" xmlns:aop="http://www.springframework.org/schema/aop"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:tx="http://www.springframework.org/schema/tx"
	xmlns:util="http://www.springframework.org/schema/util" xmlns:jpa="http://www.springframework.org/schema/data/jpa"

	xsi:schemaLocation="
		http://www.springframework.org/schema/aop
		http://www.springframework.org/schema/aop/spring-aop.xsd
		http://www.springframework.org/schema/tx
		http://www.springframework.org/schema/tx/spring-tx-4.0.xsd
		http://www.springframework.org/schema/mvc
        http://www.springframework.org/schema/mvc/spring-mvc.xsd
		http://www.springframework.org/schema/beans
		http://www.springframework.org/schema/beans/spring-beans.xsd
		http://www.springframework.org/schema/util
		http://www.springframework.org/schema/util/spring-util.xsd
		http://www.springframework.org/schema/context
		http://www.springframework.org/schema/context/spring-context.xsd
		http://www.springframework.org/schema/data/jpa
	    http://www.springframework.org/schema/data/jpa/spring-jpa.xsd
		">


	<!-- Read settings from external file and replace all ${...} in the xml -->
	<context:property-placeholder location="classpath:db.properties" />


	<!-- - POJOs labeled with the @Controller and @Service annotations are auto-detected. -->
	<context:component-scan base-package="at.fh.swenga" />

	<jpa:repositories base-package="at.fh.swenga" />
	<!-- JSR-303/JSR-349 support will be detected on classpath and enabled automatically -->



	<!-- Doesn't work <mvc:annotation-driven /> <bean class="org.springframework.data.web.config.SpringDataWebConfiguration"
		/> -->


	<!-- This is a replacement -->

<!-- 	<bean id="conversionService" -->
<!-- 		class="org.springframework.format.support.FormattingConversionServiceFactoryBean" /> -->

<!-- 	<bean -->
<!-- 		class="org.springframework.data.repository.support.DomainClassConverter"> -->
<!-- 		<constructor-arg ref="conversionService" /> -->
<!-- 	</bean> -->

<!-- 	<mvc:annotation-driven conversion-service="conversionService"> -->
<!-- 		<mvc:argument-resolvers> -->
<!-- 			<ref bean="sortResolver" /> -->
<!-- 			<ref bean="pageableResolver" /> -->
<!-- 		</mvc:argument-resolvers> -->
<!-- 	</mvc:annotation-driven> -->

<!-- 	<bean id="sortResolver" -->
<!-- 		class="org.springframework.data.web.SortHandlerMethodArgumentResolver" /> -->
<!-- 	<bean id="pageableResolver" -->
<!-- 		class="org.springframework.data.web.PageableHandlerMethodArgumentResolver"> -->
<!-- 		<constructor-arg ref="sortResolver" /> -->
<!-- 	</bean> -->

	<mvc:annotation-driven/>

	<!-- if no Controller can handle a request, ask Servlet Container, if he
		can handle it, otherwise return 404 -->
	<mvc:default-servlet-handler />

	<bean
		class="org.springframework.web.servlet.view.InternalResourceViewResolver">
		<property name="prefix">
			<value>/WEB-INF/views/</value>
		</property>
		<property name="suffix">
			<value>.jsp</value>
		</property>
	</bean>



	<bean id="dataSource" class="org.apache.commons.dbcp2.BasicDataSource">
		<property name="driverClassName" value="com.mysql.jdbc.Driver" />
		<property name="url" value="${db.url}" />
		<property name="username" value="${db.username}" />
		<property name="password" value="${db.password}" />
		<property name="initialSize" value="2" />
		<property name="maxTotal" value="5" />
	</bean>

	<bean
		class="org.springframework.orm.jpa.LocalContainerEntityManagerFactoryBean"
		id="entityManagerFactory">
		<property name="dataSource" ref="dataSource" />
		<property name="packagesToScan" value="at.fh.swenga" />
		<property name="jpaVendorAdapter">
			<bean class="org.springframework.orm.jpa.vendor.HibernateJpaVendorAdapter" />
		</property>
		<property name="jpaProperties">
			<props>
				<!-- validate: validate the schema, makes no changes to the database.
					update: update the schema. create: creates the schema, destroying previous
					data. create-drop: drop the schema at the end of the session. -->
				<prop key="hibernate.hbm2ddl.auto">update</prop>
<!-- 				<prop key="hibernate.hbm2ddl.auto">create-drop</prop> -->
				<prop key="hibernate.dialect">org.hibernate.dialect.MySQL5Dialect</prop>
				<prop key="hibernate.show_sql">true</prop>
			</props>
		</property>
	</bean>
	
	<bean id="multipartResolver"
		class="org.springframework.web.multipart.commons.CommonsMultipartResolver">
		<!-- one of the properties available; the maximum file size in bytes -->
		<property name="maxUploadSize" value="5000000000" />
	</bean>

	<bean id="transactionManager" class="org.springframework.orm.jpa.JpaTransactionManager">
		<property name="entityManagerFactory" ref="entityManagerFactory" />
	</bean>
	<tx:annotation-driven />
</beans>
